package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Customerbalance generated by hbm2java
 */
public class Customerbalance  implements java.io.Serializable {


     private CustomerbalanceId id;
     private Customermaster customermaster;
     private Devicemaster devicemaster;

    public Customerbalance() {
    }

    public Customerbalance(CustomerbalanceId id, Customermaster customermaster, Devicemaster devicemaster) {
       this.id = id;
       this.customermaster = customermaster;
       this.devicemaster = devicemaster;
    }
   
    public CustomerbalanceId getId() {
        return this.id;
    }
    
    public void setId(CustomerbalanceId id) {
        this.id = id;
    }
    public Customermaster getCustomermaster() {
        return this.customermaster;
    }
    
    public void setCustomermaster(Customermaster customermaster) {
        this.customermaster = customermaster;
    }
    public Devicemaster getDevicemaster() {
        return this.devicemaster;
    }
    
    public void setDevicemaster(Devicemaster devicemaster) {
        this.devicemaster = devicemaster;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class Customerbalance.
 * @see com.onewifi.beans.Customerbalance
 * @author Hibernate Tools
 */
public class CustomerbalanceHome {

    private static final Log log = LogFactory.getLog(CustomerbalanceHome.class);

    private final SessionFactory sessionFactory = getSessionFactory();
    
    protected SessionFactory getSessionFactory() {
        try {
            return (SessionFactory) new InitialContext().lookup("SessionFactory");
        }
        catch (Exception e) {
            log.error("Could not locate SessionFactory in JNDI", e);
            throw new IllegalStateException("Could not locate SessionFactory in JNDI");
        }
    }
    
    public void persist(Customerbalance transientInstance) {
        log.debug("persisting Customerbalance instance");
        try {
            sessionFactory.getCurrentSession().persist(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Customerbalance instance) {
        log.debug("attaching dirty Customerbalance instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Customerbalance instance) {
        log.debug("attaching clean Customerbalance instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Customerbalance persistentInstance) {
        log.debug("deleting Customerbalance instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Customerbalance merge(Customerbalance detachedInstance) {
        log.debug("merging Customerbalance instance");
        try {
            Customerbalance result = (Customerbalance) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Customerbalance findById( com.onewifi.beans.CustomerbalanceId id) {
        log.debug("getting Customerbalance instance with id: " + id);
        try {
            Customerbalance instance = (Customerbalance) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Customerbalance", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Customerbalance> findByExample(Customerbalance instance) {
        log.debug("finding Customerbalance instance by example");
        try {
            List<Customerbalance> results = (List<Customerbalance>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Customerbalance")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.Date;

/**
 * CustomerbalanceId generated by hbm2java
 */
public class CustomerbalanceId  implements java.io.Serializable {


     private String customerId;
     private String deviceId;
     private Date balanceUpdatedDate;
     private double balanceAmount;

    public CustomerbalanceId() {
    }

    public CustomerbalanceId(String customerId, String deviceId, Date balanceUpdatedDate, double balanceAmount) {
       this.customerId = customerId;
       this.deviceId = deviceId;
       this.balanceUpdatedDate = balanceUpdatedDate;
       this.balanceAmount = balanceAmount;
    }
   
    public String getCustomerId() {
        return this.customerId;
    }
    
    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }
    public String getDeviceId() {
        return this.deviceId;
    }
    
    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }
    public Date getBalanceUpdatedDate() {
        return this.balanceUpdatedDate;
    }
    
    public void setBalanceUpdatedDate(Date balanceUpdatedDate) {
        this.balanceUpdatedDate = balanceUpdatedDate;
    }
    public double getBalanceAmount() {
        return this.balanceAmount;
    }
    
    public void setBalanceAmount(double balanceAmount) {
        this.balanceAmount = balanceAmount;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof CustomerbalanceId) ) return false;
		 CustomerbalanceId castOther = ( CustomerbalanceId ) other; 
         
		 return ( (this.getCustomerId()==castOther.getCustomerId()) || ( this.getCustomerId()!=null && castOther.getCustomerId()!=null && this.getCustomerId().equals(castOther.getCustomerId()) ) )
 && ( (this.getDeviceId()==castOther.getDeviceId()) || ( this.getDeviceId()!=null && castOther.getDeviceId()!=null && this.getDeviceId().equals(castOther.getDeviceId()) ) )
 && ( (this.getBalanceUpdatedDate()==castOther.getBalanceUpdatedDate()) || ( this.getBalanceUpdatedDate()!=null && castOther.getBalanceUpdatedDate()!=null && this.getBalanceUpdatedDate().equals(castOther.getBalanceUpdatedDate()) ) )
 && (this.getBalanceAmount()==castOther.getBalanceAmount());
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getCustomerId() == null ? 0 : this.getCustomerId().hashCode() );
         result = 37 * result + ( getDeviceId() == null ? 0 : this.getDeviceId().hashCode() );
         result = 37 * result + ( getBalanceUpdatedDate() == null ? 0 : this.getBalanceUpdatedDate().hashCode() );
         result = 37 * result + (int) this.getBalanceAmount();
         return result;
   }   


}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Customerdevice generated by hbm2java
 */
public class Customerdevice  implements java.io.Serializable {


     private CustomerdeviceId id;
     private Customermaster customermaster;
     private Devicemaster devicemaster;
     private Statuscodemaster statuscodemaster;

    public Customerdevice() {
    }

    public Customerdevice(CustomerdeviceId id, Customermaster customermaster, Devicemaster devicemaster, Statuscodemaster statuscodemaster) {
       this.id = id;
       this.customermaster = customermaster;
       this.devicemaster = devicemaster;
       this.statuscodemaster = statuscodemaster;
    }
   
    public CustomerdeviceId getId() {
        return this.id;
    }
    
    public void setId(CustomerdeviceId id) {
        this.id = id;
    }
    public Customermaster getCustomermaster() {
        return this.customermaster;
    }
    
    public void setCustomermaster(Customermaster customermaster) {
        this.customermaster = customermaster;
    }
    public Devicemaster getDevicemaster() {
        return this.devicemaster;
    }
    
    public void setDevicemaster(Devicemaster devicemaster) {
        this.devicemaster = devicemaster;
    }
    public Statuscodemaster getStatuscodemaster() {
        return this.statuscodemaster;
    }
    
    public void setStatuscodemaster(Statuscodemaster statuscodemaster) {
        this.statuscodemaster = statuscodemaster;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:07:07 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Customerdevice.
 * @see com.onewifi.beans.Customerdevice
 * @author Hibernate Tools
 */
public class CustomerdeviceHome {

    private static final Log log = LogFactory.getLog(CustomerdeviceHome.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Customerdevice transientInstance) {
        log.debug("persisting Customerdevice instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Customerdevice instance) {
        log.debug("attaching dirty Customerdevice instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Customerdevice instance) {
        log.debug("attaching clean Customerdevice instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Customerdevice persistentInstance) {
        log.debug("deleting Customerdevice instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Customerdevice merge(Customerdevice detachedInstance) {
        log.debug("merging Customerdevice instance");
        try {
            Customerdevice result = (Customerdevice) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Customerdevice findById( com.onewifi.beans.CustomerdeviceId id) {
        log.debug("getting Customerdevice instance with id: " + id);
        try {
			openCurrentSessionwithTransaction();
            Customerdevice instance = (Customerdevice) currentSession
                    .get("com.onewifi.beans.Customerdevice", id);
			closeCurrentSessionwithTransaction();
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Customerdevice> findByExample(Customerdevice instance) {
        log.debug("finding Customerdevice instance by example");
        try {
            List<Customerdevice> results = (List<Customerdevice>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Customerdevice")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * CustomerdeviceId generated by hbm2java
 */
public class CustomerdeviceId  implements java.io.Serializable {


     private String customerId;
     private String deviceId;
     private String statusCode;

    public CustomerdeviceId() {
    }

    public CustomerdeviceId(String customerId, String deviceId, String statusCode) {
       this.customerId = customerId;
       this.deviceId = deviceId;
       this.statusCode = statusCode;
    }
   
    public String getCustomerId() {
        return this.customerId;
    }
    
    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }
    public String getDeviceId() {
        return this.deviceId;
    }
    
    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }
    public String getStatusCode() {
        return this.statusCode;
    }
    
    public void setStatusCode(String statusCode) {
        this.statusCode = statusCode;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof CustomerdeviceId) ) return false;
		 CustomerdeviceId castOther = ( CustomerdeviceId ) other; 
         
		 return ( (this.getCustomerId()==castOther.getCustomerId()) || ( this.getCustomerId()!=null && castOther.getCustomerId()!=null && this.getCustomerId().equals(castOther.getCustomerId()) ) )
 && ( (this.getDeviceId()==castOther.getDeviceId()) || ( this.getDeviceId()!=null && castOther.getDeviceId()!=null && this.getDeviceId().equals(castOther.getDeviceId()) ) )
 && ( (this.getStatusCode()==castOther.getStatusCode()) || ( this.getStatusCode()!=null && castOther.getStatusCode()!=null && this.getStatusCode().equals(castOther.getStatusCode()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getCustomerId() == null ? 0 : this.getCustomerId().hashCode() );
         result = 37 * result + ( getDeviceId() == null ? 0 : this.getDeviceId().hashCode() );
         result = 37 * result + ( getStatusCode() == null ? 0 : this.getStatusCode().hashCode() );
         return result;
   }   


}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Customermaster generated by hbm2java
 */
public class Customermaster  implements java.io.Serializable {


     private String customerId;
     private Statuscodemaster statuscodemaster;
     private String loginId;
     private String password;
     private String fullName;
     private String identityType;
     private String identityId;
     private byte[] identityImage;
     private String address;
     private Date dob;
     private Integer contactNo;
     private Date creationDate;
     private String secretQuestion1;
     private String secretQuestionAnswer1;
     private String secretQuestion2;
     private String secretQuestionAnswer2;
     private Set<Customerbalance> customerbalances = new HashSet<Customerbalance>(0);
     private Set<Customerdevice> customerdevices = new HashSet<Customerdevice>(0);
     private Set<Customertopup> customertopups = new HashSet<Customertopup>(0);
     private String imei;
	 
    public Customermaster() {
    }

	
    public Customermaster(String customerId, Statuscodemaster statuscodemaster, String loginId, String password, String fullName, String identityType, String identityId, byte[] identityImage, String address, Date creationDate, String secretQuestion1, String secretQuestionAnswer1, String secretQuestion2, String secretQuestionAnswer2) {
        this.customerId = customerId;
        this.statuscodemaster = statuscodemaster;
        this.loginId = loginId;
        this.password = password;
        this.fullName = fullName;
        this.identityType = identityType;
        this.identityId = identityId;
        this.identityImage = identityImage;
        this.address = address;
        this.creationDate = creationDate;
        this.secretQuestion1 = secretQuestion1;
        this.secretQuestionAnswer1 = secretQuestionAnswer1;
        this.secretQuestion2 = secretQuestion2;
        this.secretQuestionAnswer2 = secretQuestionAnswer2;
    }
    public Customermaster(String customerId, Statuscodemaster statuscodemaster, String loginId, String password, String fullName, String identityType, String identityId, byte[] identityImage, String address, Date dob, Integer contactNo, Date creationDate, String secretQuestion1, String secretQuestionAnswer1, String secretQuestion2, String secretQuestionAnswer2, Set<Customerbalance> customerbalances, Set<Customerdevice> customerdevices, Set<Customertopup> customertopups) {
       this.customerId = customerId;
       this.statuscodemaster = statuscodemaster;
       this.loginId = loginId;
       this.password = password;
       this.fullName = fullName;
       this.identityType = identityType;
       this.identityId = identityId;
       this.identityImage = identityImage;
       this.address = address;
       this.dob = dob;
       this.contactNo = contactNo;
       this.creationDate = creationDate;
       this.secretQuestion1 = secretQuestion1;
       this.secretQuestionAnswer1 = secretQuestionAnswer1;
       this.secretQuestion2 = secretQuestion2;
       this.secretQuestionAnswer2 = secretQuestionAnswer2;
       this.customerbalances = customerbalances;
       this.customerdevices = customerdevices;
       this.customertopups = customertopups;
	   
    }
   
    public String getCustomerId() {
        return this.customerId;
    }
    
    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }
    public Statuscodemaster getStatuscodemaster() {
        return this.statuscodemaster;
    }
    
    public void setStatuscodemaster(Statuscodemaster statuscodemaster) {
        this.statuscodemaster = statuscodemaster;
    }
    public String getLoginId() {
        return this.loginId;
    }
    
    public void setLoginId(String loginId) {
        this.loginId = loginId;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getFullName() {
        return this.fullName;
    }
    
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }
    public String getIdentityType() {
        return this.identityType;
    }
    
    public void setIdentityType(String identityType) {
        this.identityType = identityType;
    }
    public String getIdentityId() {
        return this.identityId;
    }
    
    public void setIdentityId(String identityId) {
        this.identityId = identityId;
    }
    public byte[] getIdentityImage() {
        return this.identityImage;
    }
    
    public void setIdentityImage(byte[] identityImage) {
        this.identityImage = identityImage;
    }
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
    public Date getDob() {
        return this.dob;
    }
    
    public void setDob(Date dob) {
        this.dob = dob;
    }
    public Integer getContactNo() {
        return this.contactNo;
    }
    
    public void setContactNo(Integer contactNo) {
        this.contactNo = contactNo;
    }
    public Date getCreationDate() {
        return this.creationDate;
    }
    
    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }
    public String getSecretQuestion1() {
        return this.secretQuestion1;
    }
    
    public void setSecretQuestion1(String secretQuestion1) {
        this.secretQuestion1 = secretQuestion1;
    }
    public String getSecretQuestionAnswer1() {
        return this.secretQuestionAnswer1;
    }
    
    public void setSecretQuestionAnswer1(String secretQuestionAnswer1) {
        this.secretQuestionAnswer1 = secretQuestionAnswer1;
    }
    public String getSecretQuestion2() {
        return this.secretQuestion2;
    }
    
    public void setSecretQuestion2(String secretQuestion2) {
        this.secretQuestion2 = secretQuestion2;
    }
    public String getSecretQuestionAnswer2() {
        return this.secretQuestionAnswer2;
    }
    
    public void setSecretQuestionAnswer2(String secretQuestionAnswer2) {
        this.secretQuestionAnswer2 = secretQuestionAnswer2;
    }
    public Set<Customerbalance> getCustomerbalances() {
        return this.customerbalances;
    }
    
    public void setCustomerbalances(Set<Customerbalance> customerbalances) {
        this.customerbalances = customerbalances;
    }
    public Set<Customerdevice> getCustomerdevices() {
        return this.customerdevices;
    }
    
    public void setCustomerdevices(Set<Customerdevice> customerdevices) {
        this.customerdevices = customerdevices;
    }
    public Set<Customertopup> getCustomertopups() {
        return this.customertopups;
    }
    
    public void setCustomertopups(Set<Customertopup> customertopups) {
        this.customertopups = customertopups;
    }

    public String getImei() {
        return this.imei;
    }
    
    public void setImei(String imei) {
        this.imei = imei;
    }



}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:07:07 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Customermaster.
 * @see com.onewifi.beans.Customermaster
 * @author Hibernate Tools
 */
public class CustomermasterHome {

    private static final Log log = LogFactory.getLog(CustomermasterHome.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Customermaster transientInstance) {
        log.debug("persisting Customermaster instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Customermaster instance) {
        log.debug("attaching dirty Customermaster instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Customermaster instance) {
        log.debug("attaching clean Customermaster instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Customermaster persistentInstance) {
        log.debug("deleting Customermaster instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Customermaster merge(Customermaster detachedInstance) {
        log.debug("merging Customermaster instance");
        try {
			openCurrentSessionwithTransaction();
			Customermaster result = (Customermaster) currentSession
                    .merge(detachedInstance);
			closeCurrentSessionwithTransaction();			            
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Customermaster findById( java.lang.String id) {
        log.debug("getting Customermaster instance with id: " + id);
        try {
            Customermaster instance = (Customermaster) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Customermaster", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Customermaster> findByExample(Customermaster instance) {
        log.debug("finding Customermaster instance by example");
        try {
			openCurrentSessionwithTransaction();
            List<Customermaster> results = (List<Customermaster>) currentSession
                    .createCriteria("com.onewifi.beans.Customermaster")
                    .add( create(instance) )
            .list();
			closeCurrentSessionwithTransaction();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Customertopup generated by hbm2java
 */
public class Customertopup  implements java.io.Serializable {


     private CustomertopupId id;
     private Customermaster customermaster;
     private Devicemaster devicemaster;
     private Topuptypes topuptypes;

    public Customertopup() {
    }

    public Customertopup(CustomertopupId id, Customermaster customermaster, Devicemaster devicemaster, Topuptypes topuptypes) {
       this.id = id;
       this.customermaster = customermaster;
       this.devicemaster = devicemaster;
       this.topuptypes = topuptypes;
    }
   
    public CustomertopupId getId() {
        return this.id;
    }
    
    public void setId(CustomertopupId id) {
        this.id = id;
    }
    public Customermaster getCustomermaster() {
        return this.customermaster;
    }
    
    public void setCustomermaster(Customermaster customermaster) {
        this.customermaster = customermaster;
    }
    public Devicemaster getDevicemaster() {
        return this.devicemaster;
    }
    
    public void setDevicemaster(Devicemaster devicemaster) {
        this.devicemaster = devicemaster;
    }
    public Topuptypes getTopuptypes() {
        return this.topuptypes;
    }
    
    public void setTopuptypes(Topuptypes topuptypes) {
        this.topuptypes = topuptypes;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class Customertopup.
 * @see com.onewifi.beans.Customertopup
 * @author Hibernate Tools
 */
public class CustomertopupHome {

    private static final Log log = LogFactory.getLog(CustomertopupHome.class);

    private final SessionFactory sessionFactory = getSessionFactory();
    
    protected SessionFactory getSessionFactory() {
        try {
            return (SessionFactory) new InitialContext().lookup("SessionFactory");
        }
        catch (Exception e) {
            log.error("Could not locate SessionFactory in JNDI", e);
            throw new IllegalStateException("Could not locate SessionFactory in JNDI");
        }
    }
    
    public void persist(Customertopup transientInstance) {
        log.debug("persisting Customertopup instance");
        try {
            sessionFactory.getCurrentSession().persist(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Customertopup instance) {
        log.debug("attaching dirty Customertopup instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Customertopup instance) {
        log.debug("attaching clean Customertopup instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Customertopup persistentInstance) {
        log.debug("deleting Customertopup instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Customertopup merge(Customertopup detachedInstance) {
        log.debug("merging Customertopup instance");
        try {
            Customertopup result = (Customertopup) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Customertopup findById( com.onewifi.beans.CustomertopupId id) {
        log.debug("getting Customertopup instance with id: " + id);
        try {
            Customertopup instance = (Customertopup) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Customertopup", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Customertopup> findByExample(Customertopup instance) {
        log.debug("finding Customertopup instance by example");
        try {
            List<Customertopup> results = (List<Customertopup>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Customertopup")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.Date;

/**
 * CustomertopupId generated by hbm2java
 */
public class CustomertopupId  implements java.io.Serializable {


     private String customerId;
     private String deviceId;
     private String topupType;
     private Date topupDate;
     private Date priceListDate;
     private String package_;
     private double currency;
     private double topupAmount;
     private Date dateQueried;
     private Date stTimeQueried;
     private Date endTimeQueried;
     private Integer loopCnt;
     private double usedCurrentAmt;
     private double usedAccAmt;
     private String exhaustedStatus;

    public CustomertopupId() {
    }

	
    public CustomertopupId(String customerId, String deviceId, String topupType, Date topupDate, Date priceListDate, String package_, double currency, double topupAmount, Date dateQueried, Date stTimeQueried, Date endTimeQueried, double usedCurrentAmt, double usedAccAmt, String exhaustedStatus) {
        this.customerId = customerId;
        this.deviceId = deviceId;
        this.topupType = topupType;
        this.topupDate = topupDate;
        this.priceListDate = priceListDate;
        this.package_ = package_;
        this.currency = currency;
        this.topupAmount = topupAmount;
        this.dateQueried = dateQueried;
        this.stTimeQueried = stTimeQueried;
        this.endTimeQueried = endTimeQueried;
        this.usedCurrentAmt = usedCurrentAmt;
        this.usedAccAmt = usedAccAmt;
        this.exhaustedStatus = exhaustedStatus;
    }
    public CustomertopupId(String customerId, String deviceId, String topupType, Date topupDate, Date priceListDate, String package_, double currency, double topupAmount, Date dateQueried, Date stTimeQueried, Date endTimeQueried, Integer loopCnt, double usedCurrentAmt, double usedAccAmt, String exhaustedStatus) {
       this.customerId = customerId;
       this.deviceId = deviceId;
       this.topupType = topupType;
       this.topupDate = topupDate;
       this.priceListDate = priceListDate;
       this.package_ = package_;
       this.currency = currency;
       this.topupAmount = topupAmount;
       this.dateQueried = dateQueried;
       this.stTimeQueried = stTimeQueried;
       this.endTimeQueried = endTimeQueried;
       this.loopCnt = loopCnt;
       this.usedCurrentAmt = usedCurrentAmt;
       this.usedAccAmt = usedAccAmt;
       this.exhaustedStatus = exhaustedStatus;
    }
   
    public String getCustomerId() {
        return this.customerId;
    }
    
    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }
    public String getDeviceId() {
        return this.deviceId;
    }
    
    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }
    public String getTopupType() {
        return this.topupType;
    }
    
    public void setTopupType(String topupType) {
        this.topupType = topupType;
    }
    public Date getTopupDate() {
        return this.topupDate;
    }
    
    public void setTopupDate(Date topupDate) {
        this.topupDate = topupDate;
    }
    public Date getPriceListDate() {
        return this.priceListDate;
    }
    
    public void setPriceListDate(Date priceListDate) {
        this.priceListDate = priceListDate;
    }
    public String getPackage_() {
        return this.package_;
    }
    
    public void setPackage_(String package_) {
        this.package_ = package_;
    }
    public double getCurrency() {
        return this.currency;
    }
    
    public void setCurrency(double currency) {
        this.currency = currency;
    }
    public double getTopupAmount() {
        return this.topupAmount;
    }
    
    public void setTopupAmount(double topupAmount) {
        this.topupAmount = topupAmount;
    }
    public Date getDateQueried() {
        return this.dateQueried;
    }
    
    public void setDateQueried(Date dateQueried) {
        this.dateQueried = dateQueried;
    }
    public Date getStTimeQueried() {
        return this.stTimeQueried;
    }
    
    public void setStTimeQueried(Date stTimeQueried) {
        this.stTimeQueried = stTimeQueried;
    }
    public Date getEndTimeQueried() {
        return this.endTimeQueried;
    }
    
    public void setEndTimeQueried(Date endTimeQueried) {
        this.endTimeQueried = endTimeQueried;
    }
    public Integer getLoopCnt() {
        return this.loopCnt;
    }
    
    public void setLoopCnt(Integer loopCnt) {
        this.loopCnt = loopCnt;
    }
    public double getUsedCurrentAmt() {
        return this.usedCurrentAmt;
    }
    
    public void setUsedCurrentAmt(double usedCurrentAmt) {
        this.usedCurrentAmt = usedCurrentAmt;
    }
    public double getUsedAccAmt() {
        return this.usedAccAmt;
    }
    
    public void setUsedAccAmt(double usedAccAmt) {
        this.usedAccAmt = usedAccAmt;
    }
    public String getExhaustedStatus() {
        return this.exhaustedStatus;
    }
    
    public void setExhaustedStatus(String exhaustedStatus) {
        this.exhaustedStatus = exhaustedStatus;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof CustomertopupId) ) return false;
		 CustomertopupId castOther = ( CustomertopupId ) other; 
         
		 return ( (this.getCustomerId()==castOther.getCustomerId()) || ( this.getCustomerId()!=null && castOther.getCustomerId()!=null && this.getCustomerId().equals(castOther.getCustomerId()) ) )
 && ( (this.getDeviceId()==castOther.getDeviceId()) || ( this.getDeviceId()!=null && castOther.getDeviceId()!=null && this.getDeviceId().equals(castOther.getDeviceId()) ) )
 && ( (this.getTopupType()==castOther.getTopupType()) || ( this.getTopupType()!=null && castOther.getTopupType()!=null && this.getTopupType().equals(castOther.getTopupType()) ) )
 && ( (this.getTopupDate()==castOther.getTopupDate()) || ( this.getTopupDate()!=null && castOther.getTopupDate()!=null && this.getTopupDate().equals(castOther.getTopupDate()) ) )
 && ( (this.getPriceListDate()==castOther.getPriceListDate()) || ( this.getPriceListDate()!=null && castOther.getPriceListDate()!=null && this.getPriceListDate().equals(castOther.getPriceListDate()) ) )
 && ( (this.getPackage_()==castOther.getPackage_()) || ( this.getPackage_()!=null && castOther.getPackage_()!=null && this.getPackage_().equals(castOther.getPackage_()) ) )
 && (this.getCurrency()==castOther.getCurrency())
 && (this.getTopupAmount()==castOther.getTopupAmount())
 && ( (this.getDateQueried()==castOther.getDateQueried()) || ( this.getDateQueried()!=null && castOther.getDateQueried()!=null && this.getDateQueried().equals(castOther.getDateQueried()) ) )
 && ( (this.getStTimeQueried()==castOther.getStTimeQueried()) || ( this.getStTimeQueried()!=null && castOther.getStTimeQueried()!=null && this.getStTimeQueried().equals(castOther.getStTimeQueried()) ) )
 && ( (this.getEndTimeQueried()==castOther.getEndTimeQueried()) || ( this.getEndTimeQueried()!=null && castOther.getEndTimeQueried()!=null && this.getEndTimeQueried().equals(castOther.getEndTimeQueried()) ) )
 && ( (this.getLoopCnt()==castOther.getLoopCnt()) || ( this.getLoopCnt()!=null && castOther.getLoopCnt()!=null && this.getLoopCnt().equals(castOther.getLoopCnt()) ) )
 && (this.getUsedCurrentAmt()==castOther.getUsedCurrentAmt())
 && (this.getUsedAccAmt()==castOther.getUsedAccAmt())
 && ( (this.getExhaustedStatus()==castOther.getExhaustedStatus()) || ( this.getExhaustedStatus()!=null && castOther.getExhaustedStatus()!=null && this.getExhaustedStatus().equals(castOther.getExhaustedStatus()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getCustomerId() == null ? 0 : this.getCustomerId().hashCode() );
         result = 37 * result + ( getDeviceId() == null ? 0 : this.getDeviceId().hashCode() );
         result = 37 * result + ( getTopupType() == null ? 0 : this.getTopupType().hashCode() );
         result = 37 * result + ( getTopupDate() == null ? 0 : this.getTopupDate().hashCode() );
         result = 37 * result + ( getPriceListDate() == null ? 0 : this.getPriceListDate().hashCode() );
         result = 37 * result + ( getPackage_() == null ? 0 : this.getPackage_().hashCode() );
         result = 37 * result + (int) this.getCurrency();
         result = 37 * result + (int) this.getTopupAmount();
         result = 37 * result + ( getDateQueried() == null ? 0 : this.getDateQueried().hashCode() );
         result = 37 * result + ( getStTimeQueried() == null ? 0 : this.getStTimeQueried().hashCode() );
         result = 37 * result + ( getEndTimeQueried() == null ? 0 : this.getEndTimeQueried().hashCode() );
         result = 37 * result + ( getLoopCnt() == null ? 0 : this.getLoopCnt().hashCode() );
         result = 37 * result + (int) this.getUsedCurrentAmt();
         result = 37 * result + (int) this.getUsedAccAmt();
         result = 37 * result + ( getExhaustedStatus() == null ? 0 : this.getExhaustedStatus().hashCode() );
         return result;
   }   


}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.HashSet;
import java.util.Set;

/**
 * Devicemaster generated by hbm2java
 */
public class Devicemaster  implements java.io.Serializable {


     private String deviceId;
     private Statuscodemaster statuscodemaster;
     private String userCode;
     private String password;
     private String partnerCode;
     private String imei;
     private String deviceSerialNo;
     private Set<Customerbalance> customerbalances = new HashSet<Customerbalance>(0);
     private Set<Customerdevice> customerdevices = new HashSet<Customerdevice>(0);
     private Set<Customertopup> customertopups = new HashSet<Customertopup>(0);

    public Devicemaster() {
    }

	
    public Devicemaster(String deviceId, Statuscodemaster statuscodemaster, String userCode, String password, String partnerCode, String imei, String deviceSerialNo) {
        this.deviceId = deviceId;
        this.statuscodemaster = statuscodemaster;
        this.userCode = userCode;
        this.password = password;
        this.partnerCode = partnerCode;
        this.imei = imei;
        this.deviceSerialNo = deviceSerialNo;
    }
    public Devicemaster(String deviceId, Statuscodemaster statuscodemaster, String userCode, String password, String partnerCode, String imei, String deviceSerialNo, Set<Customerbalance> customerbalances, Set<Customerdevice> customerdevices, Set<Customertopup> customertopups) {
       this.deviceId = deviceId;
       this.statuscodemaster = statuscodemaster;
       this.userCode = userCode;
       this.password = password;
       this.partnerCode = partnerCode;
       this.imei = imei;
       this.deviceSerialNo = deviceSerialNo;
       this.customerbalances = customerbalances;
       this.customerdevices = customerdevices;
       this.customertopups = customertopups;
    }
   
    public String getDeviceId() {
        return this.deviceId;
    }
    
    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }
    public Statuscodemaster getStatuscodemaster() {
        return this.statuscodemaster;
    }
    
    public void setStatuscodemaster(Statuscodemaster statuscodemaster) {
        this.statuscodemaster = statuscodemaster;
    }
    public String getUserCode() {
        return this.userCode;
    }
    
    public void setUserCode(String userCode) {
        this.userCode = userCode;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getPartnerCode() {
        return this.partnerCode;
    }
    
    public void setPartnerCode(String partnerCode) {
        this.partnerCode = partnerCode;
    }
    public String getImei() {
        return this.imei;
    }
    
    public void setImei(String imei) {
        this.imei = imei;
    }
    public String getDeviceSerialNo() {
        return this.deviceSerialNo;
    }
    
    public void setDeviceSerialNo(String deviceSerialNo) {
        this.deviceSerialNo = deviceSerialNo;
    }
    public Set<Customerbalance> getCustomerbalances() {
        return this.customerbalances;
    }
    
    public void setCustomerbalances(Set<Customerbalance> customerbalances) {
        this.customerbalances = customerbalances;
    }
    public Set<Customerdevice> getCustomerdevices() {
        return this.customerdevices;
    }
    
    public void setCustomerdevices(Set<Customerdevice> customerdevices) {
        this.customerdevices = customerdevices;
    }
    public Set<Customertopup> getCustomertopups() {
        return this.customertopups;
    }
    
    public void setCustomertopups(Set<Customertopup> customertopups) {
        this.customertopups = customertopups;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 2:54:24 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Devicemaster.
 * @see com.onewifi.beans.Devicemaster
 * @author Hibernate Tools
 */
public class DevicemasterHome {

    private static final Log log = LogFactory.getLog(DevicemasterHome.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Devicemaster transientInstance) {
        log.debug("persisting Devicemaster instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Devicemaster instance) {
        log.debug("attaching dirty Devicemaster instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Devicemaster instance) {
        log.debug("attaching clean Devicemaster instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Devicemaster persistentInstance) {
        log.debug("deleting Devicemaster instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Devicemaster merge(Devicemaster detachedInstance) {
        log.debug("merging Devicemaster instance");
        try {
			openCurrentSessionwithTransaction();
			Devicemaster result = (Devicemaster) currentSession.merge(detachedInstance);
			closeCurrentSessionwithTransaction();           
            //Devicemaster result = (Devicemaster) sessionFactory.getCurrentSession()
              //      .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Devicemaster findById( java.lang.String id) {
        log.debug("getting Devicemaster instance with id: " + id);
        try {
            Devicemaster instance = (Devicemaster) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Devicemaster", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Devicemaster> findByExample(Devicemaster instance) {
        log.debug("finding Devicemaster instance by example");
        try {
			openCurrentSessionwithTransaction();
            List<Devicemaster> results = (List<Devicemaster>) currentSession
                    .createCriteria("com.onewifi.beans.Devicemaster")
                    .add( create(instance) )
            .list();
			closeCurrentSessionwithTransaction();           
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Keyvaluemaster generated by hbm2java
 */
public class Keyvaluemaster  implements java.io.Serializable {


     private KeyvaluemasterId id;

    public Keyvaluemaster() {
    }

    public Keyvaluemaster(KeyvaluemasterId id) {
       this.id = id;
    }
   
    public KeyvaluemasterId getId() {
        return this.id;
    }
    
    public void setId(KeyvaluemasterId id) {
        this.id = id;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class Keyvaluemaster.
 * @see com.onewifi.beans.Keyvaluemaster
 * @author Hibernate Tools
 */
public class KeyvaluemasterHome {

    private static final Log log = LogFactory.getLog(KeyvaluemasterHome.class);

    private final SessionFactory sessionFactory = getSessionFactory();
    
    protected SessionFactory getSessionFactory() {
        try {
            return (SessionFactory) new InitialContext().lookup("SessionFactory");
        }
        catch (Exception e) {
            log.error("Could not locate SessionFactory in JNDI", e);
            throw new IllegalStateException("Could not locate SessionFactory in JNDI");
        }
    }
    
    public void persist(Keyvaluemaster transientInstance) {
        log.debug("persisting Keyvaluemaster instance");
        try {
            sessionFactory.getCurrentSession().persist(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Keyvaluemaster instance) {
        log.debug("attaching dirty Keyvaluemaster instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Keyvaluemaster instance) {
        log.debug("attaching clean Keyvaluemaster instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Keyvaluemaster persistentInstance) {
        log.debug("deleting Keyvaluemaster instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Keyvaluemaster merge(Keyvaluemaster detachedInstance) {
        log.debug("merging Keyvaluemaster instance");
        try {
            Keyvaluemaster result = (Keyvaluemaster) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Keyvaluemaster findById( com.onewifi.beans.KeyvaluemasterId id) {
        log.debug("getting Keyvaluemaster instance with id: " + id);
        try {
            Keyvaluemaster instance = (Keyvaluemaster) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Keyvaluemaster", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Keyvaluemaster> findByExample(Keyvaluemaster instance) {
        log.debug("finding Keyvaluemaster instance by example");
        try {
            List<Keyvaluemaster> results = (List<Keyvaluemaster>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Keyvaluemaster")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * KeyvaluemasterId generated by hbm2java
 */
public class KeyvaluemasterId  implements java.io.Serializable {


     private String id;
     private String type;
     private String keyInfo;
     private String value;
     private int sortOrder;

    public KeyvaluemasterId() {
    }

    public KeyvaluemasterId(String id, String type, String keyInfo, String value, int sortOrder) {
       this.id = id;
       this.type = type;
       this.keyInfo = keyInfo;
       this.value = value;
       this.sortOrder = sortOrder;
    }
   
    public String getId() {
        return this.id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    public String getType() {
        return this.type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    public String getKeyInfo() {
        return this.keyInfo;
    }
    
    public void setKeyInfo(String keyInfo) {
        this.keyInfo = keyInfo;
    }
    public String getValue() {
        return this.value;
    }
    
    public void setValue(String value) {
        this.value = value;
    }
    public int getSortOrder() {
        return this.sortOrder;
    }
    
    public void setSortOrder(int sortOrder) {
        this.sortOrder = sortOrder;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof KeyvaluemasterId) ) return false;
		 KeyvaluemasterId castOther = ( KeyvaluemasterId ) other; 
         
		 return ( (this.getId()==castOther.getId()) || ( this.getId()!=null && castOther.getId()!=null && this.getId().equals(castOther.getId()) ) )
 && ( (this.getType()==castOther.getType()) || ( this.getType()!=null && castOther.getType()!=null && this.getType().equals(castOther.getType()) ) )
 && ( (this.getKeyInfo()==castOther.getKeyInfo()) || ( this.getKeyInfo()!=null && castOther.getKeyInfo()!=null && this.getKeyInfo().equals(castOther.getKeyInfo()) ) )
 && ( (this.getValue()==castOther.getValue()) || ( this.getValue()!=null && castOther.getValue()!=null && this.getValue().equals(castOther.getValue()) ) )
 && (this.getSortOrder()==castOther.getSortOrder());
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getId() == null ? 0 : this.getId().hashCode() );
         result = 37 * result + ( getType() == null ? 0 : this.getType().hashCode() );
         result = 37 * result + ( getKeyInfo() == null ? 0 : this.getKeyInfo().hashCode() );
         result = 37 * result + ( getValue() == null ? 0 : this.getValue().hashCode() );
         result = 37 * result + this.getSortOrder();
         return result;
   }   


}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Packagemaster generated by hbm2java
 */
public class Packagemaster  implements java.io.Serializable {


     private String packageCode;
     private String packageName;
     private String country;
     private double pricePerKb;

    public Packagemaster() {
    }

    public Packagemaster(String packageCode, String packageName, String country, double pricePerKb) {
       this.packageCode = packageCode;
       this.packageName = packageName;
       this.country = country;
       this.pricePerKb = pricePerKb;
    }
   
    public String getPackageCode() {
        return this.packageCode;
    }
    
    public void setPackageCode(String packageCode) {
        this.packageCode = packageCode;
    }
    public String getPackageName() {
        return this.packageName;
    }
    
    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }
    public String getCountry() {
        return this.country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    public double getPricePerKb() {
        return this.pricePerKb;
    }
    
    public void setPricePerKb(double pricePerKb) {
        this.pricePerKb = pricePerKb;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class Packagemaster.
 * @see com.onewifi.beans.Packagemaster
 * @author Hibernate Tools
 */
public class PackagemasterHome {

    private static final Log log = LogFactory.getLog(PackagemasterHome.class);

    private final SessionFactory sessionFactory = getSessionFactory();
    
    protected SessionFactory getSessionFactory() {
        try {
            return (SessionFactory) new InitialContext().lookup("SessionFactory");
        }
        catch (Exception e) {
            log.error("Could not locate SessionFactory in JNDI", e);
            throw new IllegalStateException("Could not locate SessionFactory in JNDI");
        }
    }
    
    public void persist(Packagemaster transientInstance) {
        log.debug("persisting Packagemaster instance");
        try {
            sessionFactory.getCurrentSession().persist(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Packagemaster instance) {
        log.debug("attaching dirty Packagemaster instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Packagemaster instance) {
        log.debug("attaching clean Packagemaster instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Packagemaster persistentInstance) {
        log.debug("deleting Packagemaster instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Packagemaster merge(Packagemaster detachedInstance) {
        log.debug("merging Packagemaster instance");
        try {
            Packagemaster result = (Packagemaster) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Packagemaster findById( java.lang.String id) {
        log.debug("getting Packagemaster instance with id: " + id);
        try {
            Packagemaster instance = (Packagemaster) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Packagemaster", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Packagemaster> findByExample(Packagemaster instance) {
        log.debug("finding Packagemaster instance by example");
        try {
            List<Packagemaster> results = (List<Packagemaster>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Packagemaster")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.Date;

/**
 * Partnermaster generated by hbm2java
 */
public class Partnermaster  implements java.io.Serializable {


     private String partnerId;
     private String loginId;
     private String password;
     private String firstName;
     private String lastName;
     private String address;
     private Date creationDate;

    public Partnermaster() {
    }

    public Partnermaster(String partnerId, String loginId, String password, String firstName, String lastName, String address, Date creationDate) {
       this.partnerId = partnerId;
       this.loginId = loginId;
       this.password = password;
       this.firstName = firstName;
       this.lastName = lastName;
       this.address = address;
       this.creationDate = creationDate;
    }
   
    public String getPartnerId() {
        return this.partnerId;
    }
    
    public void setPartnerId(String partnerId) {
        this.partnerId = partnerId;
    }
    public String getLoginId() {
        return this.loginId;
    }
    
    public void setLoginId(String loginId) {
        this.loginId = loginId;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getFirstName() {
        return this.firstName;
    }
    
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return this.lastName;
    }
    
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
    public Date getCreationDate() {
        return this.creationDate;
    }
    
    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Partnermaster.
 * @see com.onewifi.beans.Partnermaster
 * @author Hibernate Tools
 */
public class PartnermasterHome {

    private static final Log log = LogFactory.getLog(PartnermasterHome.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Userrole transientInstance) {
        log.debug("persisting Userrole instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();			
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Partnermaster instance) {
        log.debug("attaching dirty Partnermaster instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Partnermaster instance) {
        log.debug("attaching clean Partnermaster instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Partnermaster persistentInstance) {
        log.debug("deleting Partnermaster instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Partnermaster merge(Partnermaster detachedInstance) {
        log.debug("merging Partnermaster instance");
        try {
			openCurrentSessionwithTransaction();
            Partnermaster result = (Partnermaster) currentSession
                    .merge(detachedInstance);
			closeCurrentSessionwithTransaction();           
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Partnermaster findById( java.lang.String id) {
        log.debug("getting Partnermaster instance with id: " + id);
        try {
            Partnermaster instance = (Partnermaster) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Partnermaster", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Partnermaster> findByExample(Partnermaster instance) {
        log.debug("finding Partnermaster instance by example");
        try {
			openCurrentSessionwithTransaction();
            List<Partnermaster> results = (List<Partnermaster>) currentSession
                    .createCriteria("com.onewifi.beans.Partnermaster")
                    .add( create(instance) )
            .list();
			closeCurrentSessionwithTransaction();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Pricing generated by hbm2java
 */
public class Pricing  implements java.io.Serializable {


     private PricingId id;

    public Pricing() {
    }

    public Pricing(PricingId id) {
       this.id = id;
    }
   
    public PricingId getId() {
        return this.id;
    }
    
    public void setId(PricingId id) {
        this.id = id;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 2:54:24 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Pricing.
 * @see com.onewifi.beans.Pricing
 * @author Hibernate Tools
 */
public class PricingHome {

    private static final Log log = LogFactory.getLog(PricingHome.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Pricing transientInstance) {
        log.debug("persisting Pricing instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();			
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Pricing instance) {
        log.debug("attaching dirty Pricing instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Pricing instance) {
        log.debug("attaching clean Pricing instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Pricing persistentInstance) {
        log.debug("deleting Pricing instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Pricing merge(Pricing detachedInstance) {
        log.debug("merging Pricing instance");
        try {
            Pricing result = (Pricing) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Pricing findById( com.onewifi.beans.PricingId id) {
        log.debug("getting Pricing instance with id: " + id);
        try {
            Pricing instance = (Pricing) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Pricing", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Pricing> findByExample(Pricing instance) {
        log.debug("finding Pricing instance by example");
        try {
            List<Pricing> results = (List<Pricing>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Pricing")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.Date;

/**
 * PricingId generated by hbm2java
 */
public class PricingId  implements java.io.Serializable {


     private String pricingId;
     private String productCode;
     private String country;
     private Double payAsYouGo;
     private Double daily150mb;
     private Double days7450mb;
     private Double days301gb;
     private Double days902gb;
     private Double days1803gb;
     private Date validDate;

    public PricingId() {
    }

	
    public PricingId(String productCode, String country) {
        this.productCode = productCode;
        this.country = country;
    }
    public PricingId(String pricingId, String productCode, String country, Double payAsYouGo, Double daily150mb, Double days7450mb, Double days301gb, Double days902gb, Double days1803gb, Date validDate) {
       this.pricingId = pricingId;
       this.productCode = productCode;
       this.country = country;
       this.payAsYouGo = payAsYouGo;
       this.daily150mb = daily150mb;
       this.days7450mb = days7450mb;
       this.days301gb = days301gb;
       this.days902gb = days902gb;
       this.days1803gb = days1803gb;
       this.validDate = validDate;
    }
   
    public String getPricingId() {
        return this.pricingId;
    }
    
    public void setPricingId(String pricingId) {
        this.pricingId = pricingId;
    }
    public String getProductCode() {
        return this.productCode;
    }
    
    public void setProductCode(String productCode) {
        this.productCode = productCode;
    }
    public String getCountry() {
        return this.country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    public Double getPayAsYouGo() {
        return this.payAsYouGo;
    }
    
    public void setPayAsYouGo(Double payAsYouGo) {
        this.payAsYouGo = payAsYouGo;
    }
    public Double getDaily150mb() {
        return this.daily150mb;
    }
    
    public void setDaily150mb(Double daily150mb) {
        this.daily150mb = daily150mb;
    }
    public Double getDays7450mb() {
        return this.days7450mb;
    }
    
    public void setDays7450mb(Double days7450mb) {
        this.days7450mb = days7450mb;
    }
    public Double getDays301gb() {
        return this.days301gb;
    }
    
    public void setDays301gb(Double days301gb) {
        this.days301gb = days301gb;
    }
    public Double getDays902gb() {
        return this.days902gb;
    }
    
    public void setDays902gb(Double days902gb) {
        this.days902gb = days902gb;
    }
    public Double getDays1803gb() {
        return this.days1803gb;
    }
    
    public void setDays1803gb(Double days1803gb) {
        this.days1803gb = days1803gb;
    }
    public Date getValidDate() {
        return this.validDate;
    }
    
    public void setValidDate(Date validDate) {
        this.validDate = validDate;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof PricingId) ) return false;
		 PricingId castOther = ( PricingId ) other; 
         
		 return ( (this.getPricingId()==castOther.getPricingId()) || ( this.getPricingId()!=null && castOther.getPricingId()!=null && this.getPricingId().equals(castOther.getPricingId()) ) )
 && ( (this.getProductCode()==castOther.getProductCode()) || ( this.getProductCode()!=null && castOther.getProductCode()!=null && this.getProductCode().equals(castOther.getProductCode()) ) )
 && ( (this.getCountry()==castOther.getCountry()) || ( this.getCountry()!=null && castOther.getCountry()!=null && this.getCountry().equals(castOther.getCountry()) ) )
 && ( (this.getPayAsYouGo()==castOther.getPayAsYouGo()) || ( this.getPayAsYouGo()!=null && castOther.getPayAsYouGo()!=null && this.getPayAsYouGo().equals(castOther.getPayAsYouGo()) ) )
 && ( (this.getDaily150mb()==castOther.getDaily150mb()) || ( this.getDaily150mb()!=null && castOther.getDaily150mb()!=null && this.getDaily150mb().equals(castOther.getDaily150mb()) ) )
 && ( (this.getDays7450mb()==castOther.getDays7450mb()) || ( this.getDays7450mb()!=null && castOther.getDays7450mb()!=null && this.getDays7450mb().equals(castOther.getDays7450mb()) ) )
 && ( (this.getDays301gb()==castOther.getDays301gb()) || ( this.getDays301gb()!=null && castOther.getDays301gb()!=null && this.getDays301gb().equals(castOther.getDays301gb()) ) )
 && ( (this.getDays902gb()==castOther.getDays902gb()) || ( this.getDays902gb()!=null && castOther.getDays902gb()!=null && this.getDays902gb().equals(castOther.getDays902gb()) ) )
 && ( (this.getDays1803gb()==castOther.getDays1803gb()) || ( this.getDays1803gb()!=null && castOther.getDays1803gb()!=null && this.getDays1803gb().equals(castOther.getDays1803gb()) ) )
 && ( (this.getValidDate()==castOther.getValidDate()) || ( this.getValidDate()!=null && castOther.getValidDate()!=null && this.getValidDate().equals(castOther.getValidDate()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getPricingId() == null ? 0 : this.getPricingId().hashCode() );
         result = 37 * result + ( getProductCode() == null ? 0 : this.getProductCode().hashCode() );
         result = 37 * result + ( getCountry() == null ? 0 : this.getCountry().hashCode() );
         result = 37 * result + ( getPayAsYouGo() == null ? 0 : this.getPayAsYouGo().hashCode() );
         result = 37 * result + ( getDaily150mb() == null ? 0 : this.getDaily150mb().hashCode() );
         result = 37 * result + ( getDays7450mb() == null ? 0 : this.getDays7450mb().hashCode() );
         result = 37 * result + ( getDays301gb() == null ? 0 : this.getDays301gb().hashCode() );
         result = 37 * result + ( getDays902gb() == null ? 0 : this.getDays902gb().hashCode() );
         result = 37 * result + ( getDays1803gb() == null ? 0 : this.getDays1803gb().hashCode() );
         result = 37 * result + ( getValidDate() == null ? 0 : this.getValidDate().hashCode() );
         return result;
   }   


}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Retailerdevice generated by hbm2java
 */
public class Retailerdevice  implements java.io.Serializable {


     private RetailerdeviceId id;

    public Retailerdevice() {
    }

    public Retailerdevice(RetailerdeviceId id) {
       this.id = id;
    }
   
    public RetailerdeviceId getId() {
        return this.id;
    }
    
    public void setId(RetailerdeviceId id) {
        this.id = id;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 2:54:24 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Retailerdevice.
 * @see com.onewifi.beans.Retailerdevice
 * @author Hibernate Tools
 */
public class RetailerdeviceHome {

    private static final Log log = LogFactory.getLog(RetailerdeviceHome.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Retailerdevice transientInstance) {
        log.debug("persisting Retailerdevice instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Retailerdevice instance) {
        log.debug("attaching dirty Retailerdevice instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Retailerdevice instance) {
        log.debug("attaching clean Retailerdevice instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Retailerdevice persistentInstance) {
        log.debug("deleting Retailerdevice instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Retailerdevice merge(Retailerdevice detachedInstance) {
        log.debug("merging Retailerdevice instance");
        try {
            Retailerdevice result = (Retailerdevice) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Retailerdevice findById( com.onewifi.beans.RetailerdeviceId id) {
        log.debug("getting Retailerdevice instance with id: " + id);
        try {
            Retailerdevice instance = (Retailerdevice) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Retailerdevice", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Retailerdevice> findByExample(Retailerdevice instance) {
        log.debug("finding Retailerdevice instance by example");
        try {
            List<Retailerdevice> results = (List<Retailerdevice>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Retailerdevice")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * RetailerdeviceId generated by hbm2java
 */
public class RetailerdeviceId  implements java.io.Serializable {


     private String assignerId;
     private String deviceSerialNo;
     private String purpose;
     private double days;
     private double price;

    public RetailerdeviceId() {
    }

    public RetailerdeviceId(String assignerId, String deviceSerialNo, String purpose, double days, double price) {
       this.assignerId = assignerId;
       this.deviceSerialNo = deviceSerialNo;
       this.purpose = purpose;
       this.days = days;
       this.price = price;
    }
   
    public String getAssignerId() {
        return this.assignerId;
    }
    
    public void setAssignerId(String assignerId) {
        this.assignerId = assignerId;
    }
    public String getDeviceSerialNo() {
        return this.deviceSerialNo;
    }
    
    public void setDeviceSerialNo(String deviceSerialNo) {
        this.deviceSerialNo = deviceSerialNo;
    }
    public String getPurpose() {
        return this.purpose;
    }
    
    public void setPurpose(String purpose) {
        this.purpose = purpose;
    }
    public double getDays() {
        return this.days;
    }
    
    public void setDays(double days) {
        this.days = days;
    }
    public double getPrice() {
        return this.price;
    }
    
    public void setPrice(double price) {
        this.price = price;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof RetailerdeviceId) ) return false;
		 RetailerdeviceId castOther = ( RetailerdeviceId ) other; 
         
		 return ( (this.getAssignerId()==castOther.getAssignerId()) || ( this.getAssignerId()!=null && castOther.getAssignerId()!=null && this.getAssignerId().equals(castOther.getAssignerId()) ) )
 && ( (this.getDeviceSerialNo()==castOther.getDeviceSerialNo()) || ( this.getDeviceSerialNo()!=null && castOther.getDeviceSerialNo()!=null && this.getDeviceSerialNo().equals(castOther.getDeviceSerialNo()) ) )
 && ( (this.getPurpose()==castOther.getPurpose()) || ( this.getPurpose()!=null && castOther.getPurpose()!=null && this.getPurpose().equals(castOther.getPurpose()) ) )
 && (this.getDays()==castOther.getDays())
 && (this.getPrice()==castOther.getPrice());
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getAssignerId() == null ? 0 : this.getAssignerId().hashCode() );
         result = 37 * result + ( getDeviceSerialNo() == null ? 0 : this.getDeviceSerialNo().hashCode() );
         result = 37 * result + ( getPurpose() == null ? 0 : this.getPurpose().hashCode() );
         result = 37 * result + (int) this.getDays();
         result = 37 * result + (int) this.getPrice();
         return result;
   }   


}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.Date;

/**
 * Retailermaster generated by hbm2java
 */
public class Retailermaster  implements java.io.Serializable {


     private String retailerId;
     private String loginId;
     private String userName;
     private String password;
     private String coyRetailerName;
     private Integer coyContactNumber;
     private String directorName;
     private String identityId;
     private String address;
     private Integer retailerContactNumber;
     private Date creationDate;
     private String secretQuestion1;
     private String secretQuestionAnswer1;
     private String secretQuestion2;
     private String secretQuestionAnswer2;

    public Retailermaster() {
    }

	
    public Retailermaster(String retailerId, String loginId, String userName, String password, String coyRetailerName, String directorName, String identityId, String address, Date creationDate, String secretQuestion1, String secretQuestionAnswer1, String secretQuestion2, String secretQuestionAnswer2) {
        this.retailerId = retailerId;
        this.loginId = loginId;
        this.userName = userName;
        this.password = password;
        this.coyRetailerName = coyRetailerName;
        this.directorName = directorName;
        this.identityId = identityId;
        this.address = address;
        this.creationDate = creationDate;
        this.secretQuestion1 = secretQuestion1;
        this.secretQuestionAnswer1 = secretQuestionAnswer1;
        this.secretQuestion2 = secretQuestion2;
        this.secretQuestionAnswer2 = secretQuestionAnswer2;
    }
    public Retailermaster(String retailerId, String loginId, String userName, String password, String coyRetailerName, Integer coyContactNumber, String directorName, String identityId, String address, Integer retailerContactNumber, Date creationDate, String secretQuestion1, String secretQuestionAnswer1, String secretQuestion2, String secretQuestionAnswer2) {
       this.retailerId = retailerId;
       this.loginId = loginId;
       this.userName = userName;
       this.password = password;
       this.coyRetailerName = coyRetailerName;
       this.coyContactNumber = coyContactNumber;
       this.directorName = directorName;
       this.identityId = identityId;
       this.address = address;
       this.retailerContactNumber = retailerContactNumber;
       this.creationDate = creationDate;
       this.secretQuestion1 = secretQuestion1;
       this.secretQuestionAnswer1 = secretQuestionAnswer1;
       this.secretQuestion2 = secretQuestion2;
       this.secretQuestionAnswer2 = secretQuestionAnswer2;
    }
   
    public String getRetailerId() {
        return this.retailerId;
    }
    
    public void setRetailerId(String retailerId) {
        this.retailerId = retailerId;
    }
    public String getLoginId() {
        return this.loginId;
    }
    
    public void setLoginId(String loginId) {
        this.loginId = loginId;
    }
    public String getUserName() {
        return this.userName;
    }
    
    public void setUserName(String userName) {
        this.userName = userName;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getCoyRetailerName() {
        return this.coyRetailerName;
    }
    
    public void setCoyRetailerName(String coyRetailerName) {
        this.coyRetailerName = coyRetailerName;
    }
    public Integer getCoyContactNumber() {
        return this.coyContactNumber;
    }
    
    public void setCoyContactNumber(Integer coyContactNumber) {
        this.coyContactNumber = coyContactNumber;
    }
    public String getDirectorName() {
        return this.directorName;
    }
    
    public void setDirectorName(String directorName) {
        this.directorName = directorName;
    }
    public String getIdentityId() {
        return this.identityId;
    }
    
    public void setIdentityId(String identityId) {
        this.identityId = identityId;
    }
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
    public Integer getRetailerContactNumber() {
        return this.retailerContactNumber;
    }
    
    public void setRetailerContactNumber(Integer retailerContactNumber) {
        this.retailerContactNumber = retailerContactNumber;
    }
    public Date getCreationDate() {
        return this.creationDate;
    }
    
    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }
    public String getSecretQuestion1() {
        return this.secretQuestion1;
    }
    
    public void setSecretQuestion1(String secretQuestion1) {
        this.secretQuestion1 = secretQuestion1;
    }
    public String getSecretQuestionAnswer1() {
        return this.secretQuestionAnswer1;
    }
    
    public void setSecretQuestionAnswer1(String secretQuestionAnswer1) {
        this.secretQuestionAnswer1 = secretQuestionAnswer1;
    }
    public String getSecretQuestion2() {
        return this.secretQuestion2;
    }
    
    public void setSecretQuestion2(String secretQuestion2) {
        this.secretQuestion2 = secretQuestion2;
    }
    public String getSecretQuestionAnswer2() {
        return this.secretQuestionAnswer2;
    }
    
    public void setSecretQuestionAnswer2(String secretQuestionAnswer2) {
        this.secretQuestionAnswer2 = secretQuestionAnswer2;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 2:54:24 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Retailermaster.
 * @see com.onewifi.beans.Retailermaster
 * @author Hibernate Tools
 */
public class RetailermasterHome {

    private static final Log log = LogFactory.getLog(RetailermasterHome.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Retailermaster transientInstance) {
        log.debug("persisting Retailermaster instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Retailermaster instance) {
        log.debug("attaching dirty Retailermaster instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Retailermaster instance) {
        log.debug("attaching clean Retailermaster instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Retailermaster persistentInstance) {
        log.debug("deleting Retailermaster instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Retailermaster merge(Retailermaster detachedInstance) {
        log.debug("merging Retailermaster instance");
        try {
			openCurrentSessionwithTransaction();
            Retailermaster result = (Retailermaster) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
			closeCurrentSessionwithTransaction();			
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Retailermaster findById( java.lang.String id) {
        log.debug("getting Retailermaster instance with id: " + id);
        try {
            Retailermaster instance = (Retailermaster) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Retailermaster", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Retailermaster> findByExample(Retailermaster instance) {
        log.debug("finding Retailermaster instance by example");
        try {
			openCurrentSessionwithTransaction();
            List<Retailermaster> results = (List<Retailermaster>) currentSession
                    .createCriteria("com.onewifi.beans.Retailermaster")
                    .add( create(instance) )
            .list();
			closeCurrentSessionwithTransaction();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.HashSet;
import java.util.Set;

/**
 * Statuscodemaster generated by hbm2java
 */
public class Statuscodemaster  implements java.io.Serializable {


     private String statusCode;
     private String statusDetail;
     private Set<Customermaster> customermasters = new HashSet<Customermaster>(0);
     private Set<Customerdevice> customerdevices = new HashSet<Customerdevice>(0);
     private Set<Devicemaster> devicemasters = new HashSet<Devicemaster>(0);

    public Statuscodemaster() {
    }

	
    public Statuscodemaster(String statusCode, String statusDetail) {
        this.statusCode = statusCode;
        this.statusDetail = statusDetail;
    }
    public Statuscodemaster(String statusCode, String statusDetail, Set<Customermaster> customermasters, Set<Customerdevice> customerdevices, Set<Devicemaster> devicemasters) {
       this.statusCode = statusCode;
       this.statusDetail = statusDetail;
       this.customermasters = customermasters;
       this.customerdevices = customerdevices;
       this.devicemasters = devicemasters;
    }
   
    public String getStatusCode() {
        return this.statusCode;
    }
    
    public void setStatusCode(String statusCode) {
        this.statusCode = statusCode;
    }
    public String getStatusDetail() {
        return this.statusDetail;
    }
    
    public void setStatusDetail(String statusDetail) {
        this.statusDetail = statusDetail;
    }
    public Set<Customermaster> getCustomermasters() {
        return this.customermasters;
    }
    
    public void setCustomermasters(Set<Customermaster> customermasters) {
        this.customermasters = customermasters;
    }
    public Set<Customerdevice> getCustomerdevices() {
        return this.customerdevices;
    }
    
    public void setCustomerdevices(Set<Customerdevice> customerdevices) {
        this.customerdevices = customerdevices;
    }
    public Set<Devicemaster> getDevicemasters() {
        return this.devicemasters;
    }
    
    public void setDevicemasters(Set<Devicemaster> devicemasters) {
        this.devicemasters = devicemasters;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class Statuscodemaster.
 * @see com.onewifi.beans.Statuscodemaster
 * @author Hibernate Tools
 */
public class StatuscodemasterHome {

    private static final Log log = LogFactory.getLog(StatuscodemasterHome.class);

    private final SessionFactory sessionFactory = getSessionFactory();
    
    protected SessionFactory getSessionFactory() {
        try {
            return (SessionFactory) new InitialContext().lookup("SessionFactory");
        }
        catch (Exception e) {
            log.error("Could not locate SessionFactory in JNDI", e);
            throw new IllegalStateException("Could not locate SessionFactory in JNDI");
        }
    }
    
    public void persist(Statuscodemaster transientInstance) {
        log.debug("persisting Statuscodemaster instance");
        try {
            sessionFactory.getCurrentSession().persist(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Statuscodemaster instance) {
        log.debug("attaching dirty Statuscodemaster instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Statuscodemaster instance) {
        log.debug("attaching clean Statuscodemaster instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Statuscodemaster persistentInstance) {
        log.debug("deleting Statuscodemaster instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Statuscodemaster merge(Statuscodemaster detachedInstance) {
        log.debug("merging Statuscodemaster instance");
        try {
            Statuscodemaster result = (Statuscodemaster) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Statuscodemaster findById( java.lang.String id) {
        log.debug("getting Statuscodemaster instance with id: " + id);
        try {
            Statuscodemaster instance = (Statuscodemaster) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Statuscodemaster", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Statuscodemaster> findByExample(Statuscodemaster instance) {
        log.debug("finding Statuscodemaster instance by example");
        try {
            List<Statuscodemaster> results = (List<Statuscodemaster>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Statuscodemaster")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Threshold generated by hbm2java
 */
public class Threshold  implements java.io.Serializable {


     private ThresholdId id;

    public Threshold() {
    }

    public Threshold(ThresholdId id) {
       this.id = id;
    }
   
    public ThresholdId getId() {
        return this.id;
    }
    
    public void setId(ThresholdId id) {
        this.id = id;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class Threshold.
 * @see com.onewifi.beans.Threshold
 * @author Hibernate Tools
 */
public class ThresholdHome {

    private static final Log log = LogFactory.getLog(ThresholdHome.class);

    private final SessionFactory sessionFactory = getSessionFactory();
    
    protected SessionFactory getSessionFactory() {
        try {
            return (SessionFactory) new InitialContext().lookup("SessionFactory");
        }
        catch (Exception e) {
            log.error("Could not locate SessionFactory in JNDI", e);
            throw new IllegalStateException("Could not locate SessionFactory in JNDI");
        }
    }
    
    public void persist(Threshold transientInstance) {
        log.debug("persisting Threshold instance");
        try {
            sessionFactory.getCurrentSession().persist(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Threshold instance) {
        log.debug("attaching dirty Threshold instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Threshold instance) {
        log.debug("attaching clean Threshold instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Threshold persistentInstance) {
        log.debug("deleting Threshold instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Threshold merge(Threshold detachedInstance) {
        log.debug("merging Threshold instance");
        try {
            Threshold result = (Threshold) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Threshold findById( com.onewifi.beans.ThresholdId id) {
        log.debug("getting Threshold instance with id: " + id);
        try {
            Threshold instance = (Threshold) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Threshold", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Threshold> findByExample(Threshold instance) {
        log.debug("finding Threshold instance by example");
        try {
            List<Threshold> results = (List<Threshold>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Threshold")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * ThresholdId generated by hbm2java
 */
public class ThresholdId  implements java.io.Serializable {


     private Double thresHoldPercent;
     private Double thresHoldAmount;
     private Integer duration;

    public ThresholdId() {
    }

    public ThresholdId(Double thresHoldPercent, Double thresHoldAmount, Integer duration) {
       this.thresHoldPercent = thresHoldPercent;
       this.thresHoldAmount = thresHoldAmount;
       this.duration = duration;
    }
   
    public Double getThresHoldPercent() {
        return this.thresHoldPercent;
    }
    
    public void setThresHoldPercent(Double thresHoldPercent) {
        this.thresHoldPercent = thresHoldPercent;
    }
    public Double getThresHoldAmount() {
        return this.thresHoldAmount;
    }
    
    public void setThresHoldAmount(Double thresHoldAmount) {
        this.thresHoldAmount = thresHoldAmount;
    }
    public Integer getDuration() {
        return this.duration;
    }
    
    public void setDuration(Integer duration) {
        this.duration = duration;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof ThresholdId) ) return false;
		 ThresholdId castOther = ( ThresholdId ) other; 
         
		 return ( (this.getThresHoldPercent()==castOther.getThresHoldPercent()) || ( this.getThresHoldPercent()!=null && castOther.getThresHoldPercent()!=null && this.getThresHoldPercent().equals(castOther.getThresHoldPercent()) ) )
 && ( (this.getThresHoldAmount()==castOther.getThresHoldAmount()) || ( this.getThresHoldAmount()!=null && castOther.getThresHoldAmount()!=null && this.getThresHoldAmount().equals(castOther.getThresHoldAmount()) ) )
 && ( (this.getDuration()==castOther.getDuration()) || ( this.getDuration()!=null && castOther.getDuration()!=null && this.getDuration().equals(castOther.getDuration()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getThresHoldPercent() == null ? 0 : this.getThresHoldPercent().hashCode() );
         result = 37 * result + ( getThresHoldAmount() == null ? 0 : this.getThresHoldAmount().hashCode() );
         result = 37 * result + ( getDuration() == null ? 0 : this.getDuration().hashCode() );
         return result;
   }   


}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.HashSet;
import java.util.Set;

/**
 * Topuptypes generated by hbm2java
 */
public class Topuptypes  implements java.io.Serializable {


     private String topupType;
     private String topupTypeName;
     private Set<Customertopup> customertopups = new HashSet<Customertopup>(0);

    public Topuptypes() {
    }

	
    public Topuptypes(String topupType) {
        this.topupType = topupType;
    }
    public Topuptypes(String topupType, String topupTypeName, Set<Customertopup> customertopups) {
       this.topupType = topupType;
       this.topupTypeName = topupTypeName;
       this.customertopups = customertopups;
    }
   
    public String getTopupType() {
        return this.topupType;
    }
    
    public void setTopupType(String topupType) {
        this.topupType = topupType;
    }
    public String getTopupTypeName() {
        return this.topupTypeName;
    }
    
    public void setTopupTypeName(String topupTypeName) {
        this.topupTypeName = topupTypeName;
    }
    public Set<Customertopup> getCustomertopups() {
        return this.customertopups;
    }
    
    public void setCustomertopups(Set<Customertopup> customertopups) {
        this.customertopups = customertopups;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class Topuptypes.
 * @see com.onewifi.beans.Topuptypes
 * @author Hibernate Tools
 */
public class TopuptypesHome {

    private static final Log log = LogFactory.getLog(TopuptypesHome.class);

    private final SessionFactory sessionFactory = getSessionFactory();
    
    protected SessionFactory getSessionFactory() {
        try {
            return (SessionFactory) new InitialContext().lookup("SessionFactory");
        }
        catch (Exception e) {
            log.error("Could not locate SessionFactory in JNDI", e);
            throw new IllegalStateException("Could not locate SessionFactory in JNDI");
        }
    }
    
    public void persist(Topuptypes transientInstance) {
        log.debug("persisting Topuptypes instance");
        try {
            sessionFactory.getCurrentSession().persist(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Topuptypes instance) {
        log.debug("attaching dirty Topuptypes instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Topuptypes instance) {
        log.debug("attaching clean Topuptypes instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Topuptypes persistentInstance) {
        log.debug("deleting Topuptypes instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Topuptypes merge(Topuptypes detachedInstance) {
        log.debug("merging Topuptypes instance");
        try {
            Topuptypes result = (Topuptypes) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Topuptypes findById( java.lang.String id) {
        log.debug("getting Topuptypes instance with id: " + id);
        try {
            Topuptypes instance = (Topuptypes) sessionFactory.getCurrentSession()
                    .get("com.onewifi.beans.Topuptypes", id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Topuptypes> findByExample(Topuptypes instance) {
        log.debug("finding Topuptypes instance by example");
        try {
            List<Topuptypes> results = (List<Topuptypes>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Topuptypes")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * Userrole generated by hbm2java
 */
public class Userrole  implements java.io.Serializable {


     private UserroleId id;

    public Userrole() {
    }

    public Userrole(UserroleId id) {
       this.id = id;
    }
   
    public UserroleId getId() {
        return this.id;
    }
    
    public void setId(UserroleId id) {
        this.id = id;
    }




}


package com.onewifi.beans;
// Generated Oct 18, 2015 11:03:55 PM by Hibernate Tools 4.3.1.Final


import java.util.List;
import javax.naming.InitialContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import static org.hibernate.criterion.Example.create;

import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Home object for domain model class Userrole.
 * @see com.onewifi.beans.Userrole
 * @author Hibernate Tools
 */
public class UserroleHome {

    private static final Log log = LogFactory.getLog(UserroleHome.class);
	
	private final SessionFactory sessionFactory = getSessionFactory();

	private Session currentSession;

    private Transaction currentTransaction;
	public Session openCurrentSession() {
        currentSession = getSessionFactory().openSession();
        return currentSession;
    }

    public Session openCurrentSessionwithTransaction() {
        currentSession = getSessionFactory().openSession();
        currentTransaction = currentSession.beginTransaction();
        return currentSession;
    }

    public void closeCurrentSession() {
        currentSession.close();
    }

    public void closeCurrentSessionwithTransaction() {
       currentTransaction.commit();
       currentSession.close();
    }

    private static SessionFactory getSessionFactory() {
        //Configuration configuration = new Configuration().configure();
        //StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
        //SessionFactory sessionFactory = configuration.buildSessionFactory(builder.build());		
        //return sessionFactory;
		
		return new Configuration().configure().buildSessionFactory();
    }

    public Session getCurrentSession() {
        return currentSession;
    }

    public void setCurrentSession(Session currentSession) {
        this.currentSession = currentSession;
    }

    public Transaction getCurrentTransaction() {
        return currentTransaction;
    }

    public void setCurrentTransaction(Transaction currentTransaction) {
        this.currentTransaction = currentTransaction;
    }

    public void persist(Userrole transientInstance) {
        log.debug("persisting Userrole instance");
        try {
			openCurrentSessionwithTransaction();
			currentSession.persist(transientInstance);
			log.debug("persist successful");
			closeCurrentSessionwithTransaction();			
            //sessionFactory.getCurrentSession().persist(transientInstance);
            //log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void attachDirty(Userrole instance) {
        log.debug("attaching dirty Userrole instance");
        try {
            sessionFactory.getCurrentSession().saveOrUpdate(instance);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Userrole instance) {
        log.debug("attaching clean Userrole instance");
        try {
            sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        }
        catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void delete(Userrole persistentInstance) {
        log.debug("deleting Userrole instance");
        try {
            sessionFactory.getCurrentSession().delete(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Userrole merge(Userrole detachedInstance) {
        log.debug("merging Userrole instance");
        try {
            Userrole result = (Userrole) sessionFactory.getCurrentSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        }
        catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }
    
    public Userrole findById( com.onewifi.beans.UserroleId id) {
        log.debug("getting Userrole instance with id: " + id);
        try {
			openCurrentSessionwithTransaction();
            Userrole instance = (Userrole) currentSession
                    .get("com.onewifi.beans.Userrole", id);
			closeCurrentSessionwithTransaction();
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }			
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    public List<Userrole> findByExample(Userrole instance) {
        log.debug("finding Userrole instance by example");
        try {
            List<Userrole> results = (List<Userrole>) sessionFactory.getCurrentSession()
                    .createCriteria("com.onewifi.beans.Userrole")
                    .add( create(instance) )
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    } 
}

package com.onewifi.beans;
// Generated Oct 18, 2015 11:24:08 PM by Hibernate Tools 4.3.1.Final



/**
 * UserroleId generated by hbm2java
 */
public class UserroleId  implements java.io.Serializable {


     private String loginId;
     private String roleName;

    public UserroleId() {
    }

    public UserroleId(String loginId, String roleName) {
       this.loginId = loginId;
       this.roleName = roleName;
    }
   
    public String getLoginId() {
        return this.loginId;
    }
    
    public void setLoginId(String loginId) {
        this.loginId = loginId;
    }
    public String getRoleName() {
        return this.roleName;
    }
    
    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof UserroleId) ) return false;
		 UserroleId castOther = ( UserroleId ) other; 
         
		 return ( (this.getLoginId()==castOther.getLoginId()) || ( this.getLoginId()!=null && castOther.getLoginId()!=null && this.getLoginId().equals(castOther.getLoginId()) ) )
 && ( (this.getRoleName()==castOther.getRoleName()) || ( this.getRoleName()!=null && castOther.getRoleName()!=null && this.getRoleName().equals(castOther.getRoleName()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getLoginId() == null ? 0 : this.getLoginId().hashCode() );
         result = 37 * result + ( getRoleName() == null ? 0 : this.getRoleName().hashCode() );
         return result;
   }   


}


